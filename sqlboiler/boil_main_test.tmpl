var flagDebugMode = flag.Bool("test.sqldebug", false, "Turns on debug mode for SQL statements")

var (
	dbMain tester
)

type tester interface {
	setup() error
	conn() (*sql.DB, error)
	teardown() error
}

func TestMain(m *testing.M) {
	if dbMain == nil {
		fmt.Println("no dbMain tester interface was ready")
		os.Exit(-1)
	}

	rand.Seed(time.Now().UnixNano())
	var err error

	setConfigDefaults()
	if err := validateConfig(); err != nil {
		fmt.Println("failed to validate config", err)
		os.Exit(-2)
	}

	// Set DebugMode so we can see generated sql statements
	flag.Parse()
	boil.DebugMode = *flagDebugMode

	if err = dbMain.setup(); err != nil {
		fmt.Println("Unable to execute setup:", err)
		os.Exit(-3)
	}

  conn, err := dbMain.conn()
  if err != nil {
    fmt.Println("failed to get connection:", err)
  }

	var code int
	boil.SetDB(conn)
	code = m.Run()

	if err = dbMain.teardown(); err != nil {
		fmt.Println("Unable to execute teardown:", err)
		os.Exit(-4)
	}

	os.Exit(code)
}

// setConfigDefaults is only necessary because of bugs in viper, noted in main
func setConfigDefaults() {
	{{if eq .DriverName "postgres" -}}
	if config.ModeViper.GetString("sslmode") == "" {
		config.ModeViper.Set("sslmode", "require")
	}
	if config.ModeViper.GetInt("port") == 0 {
		config.ModeViper.Set("port", 5432)
	}
	{{- else if eq .DriverName "mysql" -}}
	if config.ModeViper.GetString("sslmode") == "" {
		config.ModeViper.Set("sslmode", "true")
	}
	if config.ModeViper.GetInt("port") == 0 {
		config.ModeViper.Set("port", 3306)
	}
	{{- else -}}
	panic("not a valid driver name")
	{{- end}}
}

func validateConfig() error {
	return vala.BeginValidation().Validate(
		vala.StringNotEmpty(config.ModeViper.GetString("user"), "user"),
		vala.StringNotEmpty(config.ModeViper.GetString("host"), "host"),
		vala.Not(vala.Equals(config.ModeViper.GetInt("port"), 0, "port")),
		vala.StringNotEmpty(config.ModeViper.GetString("dbname"), "dbname"),
		vala.StringNotEmpty(config.ModeViper.GetString("sslmode"), "sslmode"),
	).Check()
}
