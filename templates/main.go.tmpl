package main

import (
	"fmt"
	"os"

	"{{.ImportPath}}/app"
	"{{.ImportPath}}/routes"
	"go.uber.org/zap"
)

// These are set by the linker when running the "abcweb build" command.
var version = "unknown"
var buildTime = "unknown"

// Setup initializes the App object and calls all setup on its members
func Setup(a *app.App, flags *pflag.FlagSet) error {
	if _, err := abcconfig.Bind(flags, a.Config); err != nil {
		return errors.Wrap(err, "cannot bind app config")
	}

	// Set the AssetsManifest cache to the contents of the assets 
	// manifest in the public directory
	if a.Config.Server.AssetsManifest {
		a.AssetsManifest, err := abcrender.GetManifest(a.Config.Server.PublicPath)
		if err != nil {
			return errors.Wrap(err, fmt.Sprintf("cannot get assets manifest cache at path %q", a.Config.Server.PublicPath))
		}
	}
	
	if a.Log, err := app.NewLogger(a.Config); err != nil {
		return errors.Wrap(err, "cannot create new logger")
	}
	
	{{- if not .NoSessions}}
	if a.Session, err := app.NewSessions(a.Config); err != nil {
		return errors.Wrap(err, "cannot create new sessions overseer")
	}
	{{- end}}

	// Get the default render template helpers
	appHelpers := abcrender.AppHelpers(a.AssetsManifest)
	// Append the custom render template helpers
	appHelpers = append(appHelpers, rendering.CustomHelpers(a)...)

	renderOpts := render.Options{
		Directory:     "templates",
		Layout:        "layouts/main",
		Extensions:    []string{".tmpl", ".html"},
		IsDevelopment: a.Config.Server.RenderRecompile,
		Funcs:			appHelpers,
		DisableHTTPErrorRendering: true,
	}

	a.Render = abcrender.New(renderOpts, a.AssetsManifest) 
	a.Router = NewRouter(a, app.NewMiddlewares(a.Config, a.Log))

	if err := db.InitDB(a.Config.DB); err != nil {
		return errors.Wrap(err, "failed to create global db connection")
	}

	// Check if using the latest database migration if EnforceLatestMigration
	if a.Config.DB.EnforceMigration {
		migrated, version, err := db.IsMigrated(a.Config.DB)
		if err != nil && err != db.ErrNoMigrations {
			return errors.Wrap(err, "failed to check if using latest migration")
		}
		if !migrated && err != db.ErrNoMigrations {
			return fmt.Errorf("database is out of sync with migrations, database version: %d", version)
		}
	}

	return nil
}

func main() {
	// Display the version hash and build time
	args := os.Args
	if len(args) == 2 && args[1] == "--version" {
		fmt.Println(fmt.Sprintf("Version: %q, built on %s.", version, buildTime))
		return
	}
	
	a := app.NewApp()

	// Setup the main app root command
	rootSetup(a)

	{{- if not .NoDB}}
	// Setup and bind the migrate command
	migrateSetup(state)
	{{- end}}

	if err := state.Root.Execute(); err != nil {
		state.Log.Fatal("root command execution failed", zap.Error(err))
	}
}

