package rendering

import (
	{{if (and (eq .Bootstrap "regular") (not .NoBootstrapJS)) -}}
	"bytes"
	{{- end}}
	"encoding/json"
	"fmt"
	"html/template"
	"io/ioutil"
	"path/filepath"

	"{{.ImportPath}}/config"
	"github.com/unrolled/render"
	"github.com/volatiletech/abcrender"
	"github.com/pkg/errors"
)

// AssetsManifest is the global cache of the manifest.json assets mapping file.
var AssetsManifest map[string]string

// appHelpers returns a map of the template helper functions.
// Assign the template helper funcs in here, example:
// "toUpper": strings.ToUpper
func appHelpers() template.FuncMap {
	return template.FuncMap{
		{{if not .NoLiveReload -}}
		"liveReload": liveReloadHelper,
		{{- end}}
		"jsPath":     func(relpath string) string { return manifestHelper("js", relpath) },
		"cssPath":    func(relpath string) string { return manifestHelper("css", relpath) },
		"imgPath":    func(relpath string) string { return manifestHelper("img", relpath) },
		"videoPath":  func(relpath string) string { return manifestHelper("video", relpath) },
		"audioPath":  func(relpath string) string { return manifestHelper("audio", relpath) },
		"fontPath":   func(relpath string) string { return manifestHelper("font", relpath) },
		"assetPath": func(relpath string) string {
			v, ok := AssetsManifest[relpath]
			if !ok {
				return "/assets/" + relpath
			}
			return "/assets/" + v
		},

		// wrap full asset paths in include tags
		"cssTag": cssTag,
		"jsTag":  jsTag,

		{{if (and (eq .Bootstrap "regular") (not .NoBootstrapJS)) -}}
		// return all javascript include tags for all twitter bootstrap js plugins
		"jsBootstrap": jsBootstrap,
		{{- end}}
	}
}

{{if not .NoLiveReload -}}
func liveReloadHelper(relpath string, host string) string {
	return fmt.Sprintf("/assets/js/%s?host=%s", relpath, host) 
}
{{- end}}

func manifestHelper(typ string, relpath string) string {
		v, ok := AssetsManifest[filepath.Join(typ, relpath)]
		if !ok {
			return fmt.Sprintf("/assets/%s/%s", typ, relpath)
		}
		return "/assets/" + v
}

// InitRenderer initializes the renderer using the app configuration.
// If you need to use multiple renderers, you can add more Renderer
// variables to your State object and initialize them here.
func InitRenderer(cfg *config.AppConfig, templatesDir string) abcrender.Renderer {
	helpers := appHelpers()

	// create an appConfig helper function for use within templates.
	// This helper func provides access to the s.AppConfig variables.
	helpers["appConfig"] = func() config.AppConfig {
		return *cfg
	}

	return &abcrender.Render{
		Render: render.New(render.Options{
			Directory:     templatesDir,
			Layout:        "layouts/main",
			Extensions:    []string{".tmpl", ".html"},
			IsDevelopment: cfg.RenderRecompile,
			Funcs:         []template.FuncMap{helpers},
			DisableHTTPErrorRendering: true,
		}),
	}
}

// GetManifest reads the manifest.json file in the public assets folder
// and returns a map of its mappings. Returns error if manifest.json not found.
func GetManifest(publicPath string) (map[string]string, error) {
	manifestPath := filepath.Join(publicPath, "assets", "manifest.json")
	contents, err := ioutil.ReadFile(manifestPath)
	if err != nil {
		return nil, err
	}
	if len(contents) == 0 {
		return nil, errors.New("manifest.json is empty")
	}

	manifest := map[string]string{}
	err = json.Unmarshal(contents, &manifest)
	if err != nil {
		return nil, errors.Wrap(err, "cannot unmarshal manifest.json")
	}
	if len(manifest) == 0 {
		return nil, errors.New("manifest.json has no file mappings")
	}

	return manifest, nil
}

// cssTag wraps the asset path in a css link include tag
func cssTag(relpath string) template.HTML {
	return template.HTML(fmt.Sprintf("<link href=\"%s\" rel=\"stylesheet\">", relpath))
}

// jsTag wraps the asset path in a javascript script include tag
func jsTag(relpath string) template.HTML {
	return template.HTML(fmt.Sprintf("<script src=\"%s\"></script>", relpath))
}

{{if (and (eq .Bootstrap "regular") (not .NoBootstrapJS)) -}}
// jsBootstrap returns all javascript include tags for 
// all twitter bootstrap js plugins
func jsBootstrap() template.HTML {
	files := []string{
		"/assets/js/bootstrap/transition.js",
		"/assets/js/bootstrap/util.js",
		"/assets/js/bootstrap/alert.js",
		"/assets/js/bootstrap/button.js",
		"/assets/js/bootstrap/carousel.js",
		"/assets/js/bootstrap/collapse.js",
		"/assets/js/bootstrap/dropdown.js",
		"/assets/js/bootstrap/modal.js",
		"/assets/js/bootstrap/scrollspy.js",
		"/assets/js/bootstrap/tab.js",
		"/assets/js/bootstrap/tooltip.js",
		"/assets/js/bootstrap/popover.js",
	}

	buf := bytes.Buffer{}
	for _, file := range files {
		buf.WriteString(fmt.Sprintf("<script src=\"%s\"></script>\n", file))
	}
	return template.HTML(buf.String())
}
{{- end}}
