package app

import (
	"html/template"

	"{{.ImportPath}}/rendering"
	"github.com/unrolled/render"
)

// appHelpers is a map of the template helper functions.
// Assign the template helper funcs in here, example:
// "toUpper": strings.ToUpper
var appHelpers = template.FuncMap{
	"jsPath": func(s string) string { return "/assets/js/" + s },
	"cssPath": func(s string) string { return "/assets/css/" + s },
	"imgPath": func(s string) string { return "/assets/img/" + s },
	"videoPath": func(s string) string { return "/assets/video/" + s },
	"audioPath": func(s string) string { return "/assets/audio/" + s },
	"fontPath": func(s string) string { return "/assets/fonts/" + s },
	"assetPath": func(s string) string { return "/assets/" + s },
}

// InitRenderer initializes the renderer using the app configuration.
// If you need to use multiple renderers, you can add more Renderer
// variables to your State object and initialize them here.
func (s *State) InitRenderer() {
	s.Render = &rendering.Render{
		Render: render.New(render.Options{
			Directory:     s.AppConfig.Templates,
			Layout:        "layouts/main",
			Extensions:    []string{".tmpl", ".html"},
			IsDevelopment: s.AppConfig.RenderRecompile,
			Funcs:         []template.FuncMap{appHelpers},

			// If you do not wish to handle Render errors yourself you can remove
			// this line. If this line is removed the Render library will
			// write the error.String() value to the HTTP response and
			// set the status code to 500. Note that removing this line can result
			// in leaking sensitive info through the error message strings.
			DisableHTTPErrorRendering: true,
		}),
	}
}
