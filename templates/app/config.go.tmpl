package app

import (
	"fmt"
	"os"
	"time"

	"{{.ImportPath}}/rendering"
	{{if not .NoSessions -}}
	"{{.ImportPath}}/sessions"
	{{- end}}
	"github.com/nullbio/shift"
	"github.com/pressly/chi"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/uber-go/zap"
)

// State is the configuration state for the entire app.
// The controllers are passed variables from this object when initialized.
type State struct {
	Config  *Config
	Log     zap.Logger
	Router  *chi.Mux
	Render  rendering.Renderer
	Root    *cobra.Command
	{{if not .NoSessions -}}
	Session sessions.Overseer
	{{- end}}
}

// Config for the app loaded through environment variables, command line, or
// the config.toml file.
type Config struct {
	// LiveReload enabled or disabled
	LiveReload bool `toml:"live_reload"`
	// Log messages in JSON format
	LogJSON bool `toml:"log_json"`
	// Minimum level to log
	LogLevel string `toml:"log_level"`
	// http bind address. ":<port>" for all interfaces
	Bind string `toml:"bind"`
	// https bind address. ":<port>" for all interfaces
	TLSBind string `toml:"tls_bind"`
	// TLS certificate file path
	TLSCertFile string `toml:"tls_cert_file"`
	// TLS key file path
	TLSKeyFile string `toml:"tls_key_file"`
	// Maximum duration before timing out read of the request
	ReadTimeout time.Duration `toml:"read_timeout"`
	// Maximum duration before timing out write of the response
	WriteTimeout time.Duration `toml:"write_timeout"`
	// Templates folder path
	Templates string `toml:"templates"`
	// Static assets input folder path
	AssetsIn string `toml:"assets_in"`
	// Compiled assets output folder path
	AssetsOut string `toml:"assets_out"`
	// Disable precompilation of assets
	AssetsNoCompile bool `toml:"assets_no_compile"`
	// Disable minification of assets
	AssetsNoMinify bool `toml:"assets_no_minify"`
	// Disable fingerprints in compiled asset filenames
	AssetsNoHash bool `toml:"assets_no_hash"`
	// Disable Gzip compression of asset files
	AssetsNoCompress bool `toml:"assets_no_compress"`
	// Disable browsers caching asset files by setting response headers
	AssetsNoCache bool `toml:"assets_no_cache"`
	// RenderRecompile enables recompilation of the template on every render call.
	// This should be used in development mode so no server restart is required
	// on template file changes.
	RenderRecompile bool `toml:"render_recompile"`
	{{if not .NoSessions -}}
	// Use the development mode sessions storer opposed to production mode storer
	SessionsDevStorer bool `toml:"sessions_dev_storer"`
	{{- end}}
}

// RegisterFlags registers the configuration flag defaults and help strings
func (s *State) RegisterFlags() error {
	s.Root.Flags().BoolP("live-reload", "", false, "Enable or disable LiveReload")
	s.Root.Flags().BoolP("log-json", "", true, "Log messages in JSON format")
	s.Root.Flags().StringP("log-level", "", "warn", "Minimum level to log")
	s.Root.Flags().StringP("bind", "", ":80", `HTTP bind address, eg: ":80"`)
	s.Root.Flags().StringP("tls-bind", "", "", `HTTPS bind address, eg: ":443"`)
	s.Root.Flags().StringP("tls-cert-file", "", "", "TLS certificate file path")
	s.Root.Flags().StringP("tls-key-file", "", "", "TLS key file path")
	s.Root.Flags().DurationP("read-timeout", "", time.Second*30, "Maximum duration before timing out read of the request")
	s.Root.Flags().DurationP("write-timeout", "", time.Second*30, "Maximum duration before timing out write of the response")
	s.Root.Flags().StringP("templates", "", "./templates", "Templates folder path")
	s.Root.Flags().StringP("assets-in", "", "./assets", "Static assets input folder path")
	s.Root.Flags().StringP("assets-out", "", "./public", "Static assets output folder path")
	s.Root.Flags().BoolP("assets-no-compile", "", false, "Disable precompilation of assets")
	s.Root.Flags().BoolP("assets-no-minify", "", false, "Disable minification of assets")
	s.Root.Flags().BoolP("assets-no-hash", "", false, "Disable fingerprints in compiled asset filenames")
	s.Root.Flags().BoolP("assets-no-compress", "", false, "Disable gzip compression of asset files")
	s.Root.Flags().BoolP("assets-no-cache", "", false, "Disable browsers caching asset files by setting response headers")
	// This should be used in development mode to avoid having to reload the
	// server on every template file modification.
	s.Root.Flags().BoolP("render-recompile", "", false, "Enable recompilation of the template on each render")
	{{if not .NoSessions -}}
	s.Root.Flags().BoolP("sessions-dev-storer", "", false, "Use the development mode sessions storer")
	{{- end}}

	return viper.BindPFlags(s.Root.Flags())
}

// LoadConfig loads the configuration object
func (s *State) LoadConfig() error {
	s.Config = &Config{
		LiveReload:        viper.GetBool("live-reload"),
		LogJSON:           viper.GetBool("log-json"),
		LogLevel:          viper.GetString("log-level"),
		Bind:              viper.GetString("bind"),
		TLSBind:           viper.GetString("tls-bind"),
		TLSCertFile:       viper.GetString("tls-cert-file"),
		TLSKeyFile:        viper.GetString("tls-key-file"),
		ReadTimeout:       viper.GetDuration("read-timeout"),
		WriteTimeout:      viper.GetDuration("write-timeout"),
		Templates:         viper.GetString("templates"),
		AssetsIn:          viper.GetString("assets-in"),
		AssetsOut:         viper.GetString("assets-out"),
		AssetsNoCompile:   viper.GetBool("assets-no-compile"),
		AssetsNoMinify:    viper.GetBool("assets-no-minify"),
		AssetsNoHash:      viper.GetBool("assets-no-hash"),
		AssetsNoCompress:  viper.GetBool("assets-no-compress"),
		AssetsNoCache:     viper.GetBool("assets-no-cache"),
		RenderRecompile:   viper.GetBool("render-recompile"),
		{{if not .NoSessions -}}
		SessionsDevStorer: viper.GetBool("sessions-dev-storer"),
		{{- end}}
	}

	env := os.Getenv("{{toUpper .AppName}}_ENV")
	if env == "" {
		fmt.Println(`Warning: No environment chosen using {{toUpper .AppName}}_ENV, attempting to use default of "{{.DefaultEnv}}"`)
		env = "{{.DefaultEnv}}"
	}
	return shift.Load(s.Config, "config.toml", "{{toUpper .AppName}}", env)
}
