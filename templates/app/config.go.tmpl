package app

import (
	"time"

	"{{.ImportPath}}/rendering"
	"{{.ImportPath}}/config"
	{{if not .NoSessions -}}
	"{{.ImportPath}}/sessions"
	{{- end}}
	"github.com/pressly/chi"
	"github.com/spf13/cobra"
	"go.uber.org/zap"
)

// State is the configuration state for the entire app.
// The controllers are passed variables from this object when initialized.
type State struct {
	AppConfig *config.AppConfig
	DBConfig	 *config.DBConfig
	Log		 *zap.Logger
	Router	 *chi.Mux
	Render	 rendering.Renderer
	Root		 *cobra.Command
	{{if not .NoSessions -}}
	Session sessions.Overseer
	{{- end}}
}

// RegisterFlags registers the configuration flag defaults and help strings
func RegisterFlags(root *cobra.Command) {
	root.Flags().BoolP("live-reload", "", false, "Enable or disable LiveReload")
	root.Flags().BoolP("prod-logger", "", true, "Use the production logger, JSON and log level warn")
	root.Flags().StringP("bind", "", ":80", `HTTP bind address, eg: ":80"`)
	root.Flags().StringP("tls-bind", "", "", `HTTPS bind address, eg: ":443"`)
	root.Flags().StringP("tls-cert-file", "", "", "TLS certificate file path")
	root.Flags().StringP("tls-key-file", "", "", "TLS key file path")
	root.Flags().DurationP("read-timeout", "", time.Second*30, "Maximum duration before timing out read of the request")
	root.Flags().DurationP("write-timeout", "", time.Second*30, "Maximum duration before timing out write of the response")
	root.Flags().StringP("templates", "", "./templates", "Templates folder path")
	root.Flags().StringP("assets-in", "", "./assets", "Static assets input folder path")
	root.Flags().StringP("assets-out", "", "./public", "Static assets output folder path")
	root.Flags().BoolP("assets-no-compile", "", false, "Disable precompilation of assets")
	root.Flags().BoolP("assets-no-minify", "", false, "Disable minification of assets")
	root.Flags().BoolP("assets-no-hash", "", false, "Disable fingerprints in compiled asset filenames")
	root.Flags().BoolP("assets-no-compress", "", false, "Disable gzip compression of asset files")
	root.Flags().BoolP("assets-no-cache", "", false, "Disable browsers caching asset files by setting response headers")
	// This should be used in development mode to avoid having to reload the
	// server on every template file modification.
	root.Flags().BoolP("render-recompile", "", false, "Enable recompilation of the template on each render")
	{{if not .NoSessions -}}
	root.Flags().BoolP("sessions-dev-storer", "", false, "Use the development mode sessions storer")
	{{- end}}
}

