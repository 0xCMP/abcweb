package middleware

import (
	"errors"
	"net/http"

	"github.com/volatiletech/abcmiddleware"
	chimiddleware "github.com/pressly/chi/middleware"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)


// These are the errors that can be used in your controllers and matched
// against in the Errors middleware to perform special actions.
var (
	ErrUnauthorized = errors.New("not authorized")
	ErrForbidden = errors.New("access is forbidden")
)

// AppHandler is the function signature for controllers that return errors.
type AppHandler func(w http.ResponseWriter, r *http.Request) error

// Errors is a middleware to handle controller errors and error page rendering.
// The benefit of using this middleware opposed to logging and rendering
// errors directly in your controller is that it's all centralized to one
// location which simplifies adding notifiers (like slack and email).
// It also reduces a lot of controller boilerplate.
func (m Middleware) Errors(ctrl AppHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		err := ctrl(w, r)
		if err == nil {
			return
		}

		var errorTemplate string
		var code int

		switch err {
		case ErrUnauthorized:
			code = http.StatusUnauthorized
			errorTemplate = "401"
		case ErrForbidden:
			code = http.StatusForbidden
			errorTemplate = "403"
		default:
			code = http.StatusInternalServerError
			errorTemplate = "500"
		}

		{{if .NoRequestID -}}
		log := s.Log
		{{- else -}}
		// Get the Request ID scoped logger
		log := abcmiddleware.Log(r)
		{{- end}}

		fields := []zapcore.Field{
			zap.String("method", r.Method),
			zap.String("uri", r.RequestURI),
			zap.Bool("tls", r.TLS != nil),
			zap.String("protocol", r.Proto),
			zap.String("host", r.Host),
			zap.String("remote_addr", r.RemoteAddr),
			zap.Error(err),
		}

		{{if not .NoRequestID -}}
		// log with the request_id scoped logger
		switch code {
		case http.StatusInternalServerError:
			log.Error("request error", fields...)
			requestID := chimiddleware.GetReqID(r.Context())
			m.Render.HTML(w, code, "errors/" + errorTemplate, requestID)
		default: // warn does not log stacktrace in prod, but error and above does
			log.Warn("request failed", fields...)
			m.Render.HTML(w, code, "errors/" + errorTemplate, nil)
		}
		{{- else -}}
		switch code {
		case http.StatusInternalServerError:
			log.Error("request error", fields...)
		default: // warn does not log stacktrace in prod, but error and above does
			log.Warn("request failed", fields...)
		}

		m.Render.HTML(w, code, "errors/" + errorTemplate, nil)
		{{- end}}
	}
}
