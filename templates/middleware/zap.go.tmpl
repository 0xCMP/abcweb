package middleware

import (
	"bytes"
	"fmt"
	"net/http"
	"time"

	chimiddleware "github.com/pressly/chi/middleware"
	"github.com/uber-go/zap"
)

// zapResponseWriter is a wrapper that includes that http status and size for logging
type zapResponseWriter struct {
	http.ResponseWriter
	status int
	size   int
}

// Zap middleware handles web request logging using Zap
func (m Middleware) Zap(next http.Handler) http.Handler {
	fn := func(w http.ResponseWriter, r *http.Request) {
		t := time.Now()
		zw := ZapResponseWriter{ResponseWriter: w}

		// Serve the request
		next.ServeHTTP(zw, r)

		// Write the request log line
		writeZap(m.Log, r, t, zw.Status, zw.Size)
	}

	return http.HandlerFunc(fn)
}

func writeZap(log zap.Logger, r *http.Request, t time.Time, status int, size int64) {
	elapsed := time.Now().Sub(t)
	requestID := chimiddleware.GetReqID(r.Context())

	var protocol string
	if r.TLS == nil {
		protocol = "http"
	} else {
		protocol = "https"
	}

	if includeReqID {
		log = middleware.GetRequestIDLogger(r.Context())
	}

	// log all the fields
	log.Info("something", 
		zap.Bool("tls", r.TLS != nil),
		zap.String("protocol", r.Proto),
		zap.String("host", r.Host), 
		zap.String("uri", r.RequestURI),
		zap.String("remoteaddr", r.RemoteAddr),
		zap.Int("status", status),
		zap.Int64("size", size),
		zap.Duration("elapsed", elapsed),
	)
}
