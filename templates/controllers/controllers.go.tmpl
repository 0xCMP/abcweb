package controllers

import (
	"net/http"

	"{{.ImportPath}}/config"
	"{{.ImportPath}}/rendering"
	{{if not .NoSessions -}}
	"github.com/volatiletech/abcsessions"
	{{- end}}
	"github.com/volatiletech/abcrender"
	"github.com/volatiletech/abcmiddleware"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// Root struct exposes useful variables to every controller route handler.
// If you wanted to pass additional objects to each controller route handler
// you can add them here, and then assign them in app/routes.go where the
// instance of controller is created.
type Root struct {
	Log     *zap.Logger
	Render  abcrender.Renderer
	{{if not .NoSessions -}}
	Session abcsessions.Overseer
	{{- end}}
	// The list of errors that can be used in all controllers.
	// Both the Errors middleware and Root controller is initialized
	// with this list in app/routes.go
	Errors map[string]error
}

// Main is the controller struct for the main routes (home, about, etc).
// You can add variables to this controller struct to expose them
// to the controller route handlers attached to this controller. 
type Main struct {
	Root
}

{{if not .NoRequestID -}}
// Log returns the Request ID scoped logger from the request Context
// and panics if it cannot be found.
// This is a convenience wrapper -- Log() is nicer than abcmiddleware.Log()
func Log(r *http.Request) *zap.Logger {
	return abcmiddleware.Log(r)
}
{{- end}}

// NewRootMock returns a Root struct with all members initialized to
// test compatible mock values
func NewRootMock(templatesDir string) Root {
	{{if not .NoSessions -}}
	// Set up the sessions overseer
	opts := abcsessions.NewCookieOptions()
	opts.Secure = false
	mem, err := abcsessions.NewDefaultMemoryStorer()
	if err != nil {
		panic(err)
	}
	{{- end}}

	// Set up zap logger. Use zap.NewNop() if you wish to disable logging.
	zapCfg := zap.NewDevelopmentConfig()
	zapCfg.EncoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder
	zapCfg.OutputPaths = []string{"stdout"}
	log, err := zapCfg.Build()
	if err != nil {
		panic(err)
	}

	// Set up the template renderer
	appCfg := &config.AppConfig{}
	appCfg.RenderRecompile = true

	return Root{
		{{if not .NoSessions -}}
		Session: abcsessions.NewStorageOverseer(opts, mem),
		{{- end}}
		Log:     log,
		Render:  rendering.InitRenderer(appCfg, templatesDir),
	}
}
