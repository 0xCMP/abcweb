package controllers

import (
	"os"
	"fmt"
	"testing"

	"github.com/volatiletech/abcweb/abcconfig"
	{{if not .NoDB -}}
	"path/filepath"
	"{{.ImportPath}}/db"
	{{- end}}

	{{if not .NoDB -}}
	"github.com/spf13/viper"
	{{- end}}
)

func TestMain(m *testing.M) {
	// Your custom TestMain pre-Run() code goes here

	{{if not .NoDB -}}
	r := testMainMigrations(m)
	{{- else -}}
	r := m.Run()
	{{- end}}

	// Your custom TestMain post-Run() code goes here

	os.Exit(r)
}

{{- if not .NoDB}}
// testMainMigrations executes the database migrations for the test database
// defined in config.toml and executes testdata.sql, then runs the unit tests.
// It returns a status code to be used with os.Exit(). Codes > 0 indicate error.
func testMainMigrations(m *testing.M) int {
	// Load the database config from test env
	v := viper.New()
	abcconfig.ConfigureViper(v, filepath.FromSlash("../config.toml"))
 
	v = v.Sub("test")
	if v == nil {
		fmt.Println("TestMain cannot load environment \"test\" from config.toml")
		return 1
	}

	cfg := abcconfig.LoadAppConfig(v)

	if len(cfg.DB.User) == 0 {
		fmt.Println("No user defined in config.toml, skipping database migrations.")
	} else {
		err := abcconfig.ValidateDBConfig(cfg.DB)
		if err != nil {
			fmt.Printf("Invalid DB Configuration: %s\n", err)
			return 2
		}

		// Execute database migrations
		count, err := abcdatabase.SetupTestSuite(cfg.DB, GoTestdata)
		if err != nil {
			fmt.Printf("TestMain Setup error: %s\n", err)
			return 3
		}

		fmt.Printf("TestMain Setup ran %d migrations.\n", count)
	}

	// Run the package tests
	return m.Run()
}
{{- end}}

func TestNewRootMock(t *testing.T) {
	t.Parallel()

	root := NewRootMock("test")

	if root.Log == nil {
		t.Error("expected logger to be set")
	}
	if root.Render == nil {
		t.Error("expected renderer to be set")
	}
	if root.Session == nil {
		t.Error("expected sessions overseer to be set")
	}
}
