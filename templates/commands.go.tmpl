package main

import (
	"{{.ImportPath}}/app"
	"{{.ImportPath}}/app/serving"
	"{{.ImportPath}}/config"
	"{{.ImportPath}}/db"
	"{{.ImportPath}}/rendering"
)

// rootSetup sets up the root cobra command
func rootSetup(state *app.State) {
	state.Root = &cobra.Command{
		Use:   "{{.AppName}} [flags]",
		Short: "{{.AppName}} web app server",
		RunE: func(cmd *cobra.Command, args []string) error {
			// Start https and/or http listeners (app/server.go)
			return state.StartServer()
		},
	}

	// Register the command-line configuration flags (app/config.go)
	app.RegisterFlags(state.Root)

	// The pre-run function will initialize the app.
	state.Root.PreRunE = func(cmd *cobra.Command, args []string) error {
		var err error

		// Initialize the AppConfig and DBConfig (app/config.go)
		state.InitConfig()	

		// Initialize the zap logger (app/logger.go)
		state.InitLogger()

		// Create a new router
		state.Router = chi.NewRouter()

		{{if not .NoSessions -}}
		// Configure the sessions overseer (app/sessions.go)
		state.InitSessions()
		{{- end}}

		// Cache the assets manifest.json file mappings (app/render.go)
		if state.AppConfig.AssetsManifest {
			rendering.AssetsManifest, err = rendering.GetManifest("public")
			if err != nil {
				return err
			}
		}

		// Configure the renderer (rendering/rendering.go)
		state.Render = rendering.InitRenderer(state.AppConfig, "templates")

		// Enable middleware for the router (app/middleware.go)
		state.InitMiddleware()

		// Initialize the routes with the renderer (app/routes.go)
		state.InitRoutes()
		return nil
	}
}

// migrateSetup sets up the migrate command and binds it to the root command
func migrateSetup(state *app.State) { 
	migrate := &cobra.Command{
		Use:   "migrate",
		Short: "Run your database migrations",
		RunE: func(cmd *cobra.Command, args []string) error {
			viper.BindPFlags(cmd.Flags())

			// Initialize the AppConfig and DBConfig (app/config.go)
			state.InitConfig()	

			if _, err := os.Stat("migrations"); err != nil {
				return errors.Wrap(err, "could not find migrations folder")
			}

			connStr := db.GetConnStr(state.DBConfig)
			if viper.GetBool("down") {
				name, err := mig.Down(state.DBConfig.DB, connStr, "migrations")
				if err != nil {
					return errors.Wrap(err, "call to mig down failed")
				}
				fmt.Printf("rolled back migration %q\n", name)
			} else {
				count, err := mig.Up(state.DBConfig.DB, connStr, "migrations")
				if err != nil {
					return errors.Wrap(err, "call to mig up failed")
				}
				fmt.Printf("migrated %d database migrations\n", count)
			}

			return nil
		},
	}

	migrate.Flags().BoolP("down", "d", false, "Roll back the database migration version by one")
	
	state.Root.AddCommand(migrate)
}
