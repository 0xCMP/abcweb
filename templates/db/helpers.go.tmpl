package db

import (
	"fmt"
	"database/sql"
	"path/filepath"
	"io/ioutil"
	"strconv"
	"regexp"
	
	// mysql driver
	_ "github.com/go-sql-driver/mysql"
	// postgres driver
	_ "github.com/lib/pq"
	"github.com/vattle/sqlboiler/bdb/drivers"
	"github.com/volatiletech/helpers/git"
	"github.com/volatiletech/mig"
	"github.com/pkg/errors"
	"github.com/volatiletech/abcweb/abcconfig"
)


// Setup executes the migrations "up" against the passed in database and also
// inserts the test data defined in testdata.sql.
//
// Setup is used primarily as a testing helper, and is called in
// controllers/controllers_test.go to set up the database state for the
// controller tests.
func Setup(cfg *abcconfig.DBConfig) (int, error) {
	appPath, err := git.GetAppPath()
	if err != nil {
		return 0, err
	}

	// copy cfg into cfgNew
	cfgNew := *cfg

	// Drop and create the database if it exists so each test run starts
	// on a clean slate
	if cfg.DB == "postgres" {
		// Set the db to the default postgres db so we have something to connect to
		// to create a new database or drop old databases
		cfgNew.DBName = "postgres"

		connStr, err := GetConnStr(&cfgNew)
		if err != nil {
			return 0, err
		}

		db, err := sql.Open(cfgNew.DB, connStr)
		if err != nil {
			return 0, err
		}

		_, err = db.Exec(fmt.Sprintf("DROP DATABASE IF EXISTS %s;", cfg.DBName))
		if err != nil {
			return 0, errors.Wrap(err, "drop if exists failed")
		}

		_, err = db.Exec(fmt.Sprintf("CREATE DATABASE %s;", cfg.DBName))
		if err != nil {
			return 0, errors.Wrap(err, "create database failed")
		}

		db.Close()
	} else if cfg.DB == "mysql" {
		cfgNew.DBName = ""

		connStr, err := GetConnStr(&cfgNew)
		if err != nil {
			return 0, err
		}

		db, err := sql.Open(cfgNew.DB, connStr)
		if err != nil {
			return 0, err
		}

		_, err = db.Exec(fmt.Sprintf("DROP DATABASE IF EXISTS %s;", cfg.DBName))
		if err != nil {
			return 0, errors.Wrap(err, "drop if exists failed")
		}

		_, err = db.Exec(fmt.Sprintf("CREATE DATABASE %s;", cfg.DBName))
		if err != nil {
			return 0, errors.Wrap(err, "create database failed")
		}

		db.Close()
	}

	connStr, err := GetConnStr(cfg)
	if err != nil {
		return 0, err
	}

	count, err := mig.Up(cfg.DB, connStr, filepath.Join(appPath, "db", "migrations"))
	if err != nil {
		return count, err
	}

	if err := sqlTestdata(cfg); err != nil {
		return count, err
	}

	err = goTestdata(cfg.DB, connStr)

	return count, err
}
