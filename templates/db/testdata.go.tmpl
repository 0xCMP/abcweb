package db

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"

	"{{.ImportPath}}/config"
	"github.com/nullbio/helpers/git"
)

// goTestdata is a function that can be edited and used to insert testdata
// into your test database after the migrations have finished executing
// when running unit tests.
//
// This can be used as an alternative or addition to testdata.sql if you 
// require go logic or would prefer to use your generated SQLBoiler 
// model to perform db operations.
//
// To use this function just uncomment the code and perform your db operations
// using the uncommented db handle which will be connected to the test database.
func goTestdata(driver string, conn string) error {
	// db, err := sql.Open(driver, conn)
	// if err != nil {
	//	return err
	// }
	// defer db.Close()

	// database operations here to insert testdata using above db handle
	return nil
}

// sqlTestdata executes the testdata.sql file SQL against the passed in test db.
// This is not a function to be edited.
func sqlTestdata(cfg *config.DBConfig) error {
	appPath, err := git.GetAppPath()
	if err != nil {
		return err
	}

	fh, err := os.Open(filepath.Join(appPath, "db", "testdata.sql"))
	if err != nil {
		return fmt.Errorf("cannot open testdata.sql file: %v", err)
	}
	defer fh.Close()

	if cfg.DB == "postgres" {
		passFilePath, err := pgPassFile(cfg)
		if err != nil {
			return err
		}
		defer os.Remove(passFilePath)

		cmd := exec.Command("psql", cfg.DBName, "-v", "ON_ERROR_STOP=1")
		cmd.Stdin = fh
		cmd.Env = append(os.Environ(), pgEnv(cfg, passFilePath)...)

		res, err := cmd.CombinedOutput()
		if err != nil {
			fmt.Printf(string(res))
		}

		return err
	} else if cfg.DB == "mysql" {
		passFile, err := mysqlPassFile(cfg)
		if err != nil {
			return err
		}
		defer os.Remove(passFile)

		cmd := exec.Command("mysql", fmt.Sprintf("--defaults-file=%s", passFile), "--database", cfg.DBName)
		cmd.Stdin = fh

		res, err := cmd.CombinedOutput()
		if err != nil {
			fmt.Println(string(res))
		}

		return err
	}

	return fmt.Errorf("cannot import sql testdata, incompatible database %q", cfg.DB)
}
