package db

import (
	"fmt"
	"database/sql"
	"path/filepath"
	"io/ioutil"

	"github.com/vattle/sqlboiler/bdb/drivers"
	"github.com/nullbio/helpers/git"
	"github.com/pressly/goose"
	"github.com/pkg/errors"
	"{{.ImportPath}}/config"
)

// DB is the global database handle to your config defined db
var DB *sql.DB

// InitDB initializes the DB global database handle
func InitDB(cfg *config.DBConfig) error {
	// No username provided is a signal to skip database usage
	if len(cfg.User) == 0 {
		return nil
	}

	var err error
	DB, err = sql.Open(cfg.DB, GetConnStr(cfg))
	if err != nil {
		return err
	}

	p := DB.Ping()
	if p != nil {
		return p
	}

	return nil
}

// GetConnStr returns a connection string for the database software used
func GetConnStr(cfg *config.DBConfig) string {
	if len(cfg.DB) == 0 {
		panic("db field in database.toml must be provided")
	}

	if cfg.DB == "postgres" {
		return drivers.PostgresBuildQueryString(cfg.User, cfg.Pass, cfg.DBName, cfg.Host, cfg.Port, cfg.SSLMode)
	} else if cfg.DB == "mysql" {
		return drivers.MySQLBuildQueryString(cfg.User, cfg.Pass, cfg.DBName, cfg.Host, cfg.Port, cfg.SSLMode)
	}

	panic(fmt.Sprintf("cannot get connection string for unknown database %q", cfg.DB))
}

// Setup executes the migrations "up" against the passed in database and also
// inserts the test data defined in testdata.sql
func Setup(cfg *config.DBConfig) error {
	appPath, err := git.GetAppPath()
	if err != nil {
		return err
	}

	connStr := GetConnStr(cfg)
	db, err := sql.Open(cfg.DB, connStr)
	if err != nil {
		return err
	}
	defer db.Close()
	
	err = goose.Up(db, filepath.Join(appPath, "db", "migrations"))	
	if err != nil {
		return err
	}

	if err := sqlTestdata(cfg); err != nil {
		return err
	}

	err = goTestdata(cfg.DB, connStr)

	return err
}

// Teardown executes the migrations "down" against the passed in database
func Teardown(cfg *config.DBConfig) error {
	appPath, err := git.GetAppPath()
	if err != nil {
		return err
	}

	db, err := sql.Open(cfg.DB, GetConnStr(cfg))
	if err != nil {
		return err
	}
	defer db.Close()
	
	err = goose.Down(db, filepath.Join(appPath, "db", "migrations"))	
	if err != nil {
		return err
	}

	return nil
}

// pgEnv returns a slice of the connection related environment variables
func pgEnv(cfg *config.DBConfig, passFilePath string) []string {
  return []string{
    fmt.Sprintf("PGHOST=%s", cfg.Host),
    fmt.Sprintf("PGPORT=%d", cfg.Port),
    fmt.Sprintf("PGUSER=%s", cfg.User),
    fmt.Sprintf("PGPASSFILE=%s", passFilePath),
  }
}

// pgPassFile creates a file in the temp directory containing the connection
// details and password for the database to be passed into the mysql cmdline cmd
func pgPassFile(cfg *config.DBConfig) (string, error) {
	tmp, err := ioutil.TempFile("", "pgpass")
	if err != nil {
		return "", errors.New("failed to create postgres pass file")
	}
	defer tmp.Close()

	fmt.Fprintf(tmp, "%s:%d:%s:%s", cfg.Host, cfg.Port, cfg.DBName, cfg.User)
	if len(cfg.Pass) != 0 {
		fmt.Fprintf(tmp, ":%s", cfg.Pass)
	}
	fmt.Fprintln(tmp)

	return tmp.Name(), nil
}

// mysqlPassFile creates a file in the temp directory containing the connection
// details and password for the database to be passed into the mysql cmdline cmd
func mysqlPassFile(cfg *config.DBConfig) (string, error) {
	tmp, err := ioutil.TempFile("", "mysqlpass")
	if err != nil {
		return "", errors.Wrap(err, "failed to create mysql pass file")
	}
	defer tmp.Close()

	fmt.Fprintln(tmp, "[client]")
	fmt.Fprintf(tmp, "host=%s\n", cfg.Host)
	fmt.Fprintf(tmp, "port=%d\n", cfg.Port)
	fmt.Fprintf(tmp, "user=%s\n", cfg.User)
	fmt.Fprintf(tmp, "password=%s\n", cfg.Pass)
	
	var sslMode string
	switch cfg.SSLMode {
	case "true":
		sslMode = "REQUIRED"
	case "false":
		sslMode = "DISABLED"
	default:
		sslMode = "PREFERRED"
	}

	fmt.Fprintf(tmp, "ssl-mode=%s\n", sslMode)
	
	return tmp.Name(), nil
}
